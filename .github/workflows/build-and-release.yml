name: Build and Release C# Extension (with Roslyn Server)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # 매일 0시에 실행
  push:
    branches: [main, master]

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1. 업스트림 dotnet/vscode-csharp 최신 코드 checkout
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Checkout upstream vscode-csharp
        uses: actions/checkout@v4
        with:
          repository: dotnet/vscode-csharp
          ref: main         # 필요에 따라 release 브랜치/tag로 변경
          path: upstream

      # 2. Node.js 및 dotnet SDK 설치
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # 3. 의존성 설치 및 Language Server 자동 다운로드
      - name: Install dependencies and download language server
        run: |
          cd upstream
          npm install
          npm run downloadServer
          npm install -g vsce ovsx

      # 4. VSIX 패키지 생성
      - name: Build VSIX package
        run: |
          cd upstream
          vsce package

      # 5. 결과물 아티팩트로 업로드 (Optional)
      - name: Upload VSIX as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-csharp.vsix
          path: upstream/*.vsix

      # 6. GitHub Release 자동 생성 및 VSIX 업로드
      #- name: Create Release
      #  id: create_release
      #  uses: softprops/action-gh-release@v2
      #  with:
      #    tag_name: csharp-auto-${{ github.run_id }}
      #    name: Automated Build ${{ github.run_id }}
      #    body: |
      #      Automated build of the latest vscode-csharp with Roslyn server included.
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #- name: Upload VSIX to Release
      #  uses: softprops/action-gh-release@v2
      #  with:
      #    files: upstream/*.vsix
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 7. (옵션) Open VSX에 업로드
      #- name: Publish to Open VSX
      #  if: env.OPEN_VSX_TOKEN != ''
      #  run: |
      #    cd upstream
      #    ovsx publish *.vsix -p $OPEN_VSX_TOKEN
      #  env:
      #    OPEN_VSX_TOKEN: ${{ secrets.OPEN_VSX_TOKEN }}

      # 8. (Optional) 빌드 결과 검증
      - name: Verify server inclusion
        run: |
          cd upstream
          if [ ! -d "./dist/roslynLspServer" ] && [ ! -d "./server" ]; then
            echo "Roslyn LSP server not found in VSIX package! Build failed."
            exit 1
          fi

